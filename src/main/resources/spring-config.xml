<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
                           http://www.springframework.org/schema/tx
				           http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">

    <!-- 扫描service包 交给spring容器管理 -->
    <context:component-scan base-package="test.service"/>

    <!-- 加载数据库配置文件 -->
    <context:property-placeholder location="classpath:jdbc.properties" ignore-unresolvable="true"/>

    <!-- 加载数据源-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${driverClass}"/>
        <property name="url" value="${connectionURL}"/>
        <property name="username" value="${userId}"/>
        <property name="password" value="${password}"/>
    </bean>

    <!-- 创建sqlSessionFactory，加载mybatis的配置文件，注入数据源 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 注入数据源 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 注入接口对应的sql映射xml文件 -->
        <property name="mapperLocations" value="classpath:mapping/*.xml"/>
        <!-- 注入mybatis配置文件 -->
       <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>

    <!-- 扫描mapper接口所在的包，生成代理实现类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="test.mapper"/>
    </bean>

    <!-- 配置Spring平台事务管理器{不同持久化框架具体的实现类(实现Spirng的PlatformTransactionManager)不同 下面为mybatis} -->
    <bean id="transactionalManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 配置事务的增强 -->
    <tx:advice id="txAdvice" transaction-manager="transactionalManager">
        <tx:attributes>
            <tx:method name="transactionXMLTest" propagation="REQUIRED" />
        </tx:attributes>
    </tx:advice>
    <!-- aop的配置 -->
    <aop:config>
        <!-- 配置需要事务管理的方法 -->
        <aop:pointcut id="pointCut" expression="execution(* test.service.impl.CodeTransactionalTestServiceImpl.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="pointCut"/>
    </aop:config>

    <!-- 开启spring注解事物支持 -->
    <tx:annotation-driven transaction-manager="transactionalManager"/>

    <!-- 编程式事物 配置事物管理模板 -->
    <bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
        <property name="transactionManager" ref="transactionalManager"/>
    </bean>


    <!-- bean标签没有字标签 构造方法注入,调用类的无参构造方法 -->
    <bean id="helloTest" class="test.HelloTest" scope="prototype"></bean>


    <!-- 开启注解方式 -->
    <aop:aspectj-autoproxy expose-proxy="true"/>

    <!-- aop注解方式 -->
    <bean id="xMLAopTest" class="test.aop.XMLAopTest"/>
    <aop:config>
        <!-- 配置切入点 -->
        <aop:pointcut id="xmlPointCut" expression="execution(* test.HelloTest.sayHello())"/>
        <!-- 配置切面 -->
        <aop:aspect ref="xMLAopTest" order="1">
            <!-- 增强方式 -->
            <aop:before method="before" pointcut-ref="xmlPointCut"/>
            <aop:after method="after"   pointcut-ref="xmlPointCut"/>
            <aop:around method="around" pointcut-ref="xmlPointCut"/>
            <aop:after-returning method="afterReturning" pointcut-ref="xmlPointCut"/>
            <aop:after-throwing method="afterThrowing" pointcut-ref="xmlPointCut"/>
        </aop:aspect>
    </aop:config>

    <!-- Bean生命周期测试 -->
    <!--<bean id="beanLiveTest" class="test.beanLive.BeanLiveTest" init-method="myInitMethod" destroy-method="myDestroy"/>-->
</beans>